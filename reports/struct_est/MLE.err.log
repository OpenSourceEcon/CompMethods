Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import the necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import requests

# Download and save the data file Econ381totpts.txt as NumPy array
url = ('https://raw.githubusercontent.com/OpenSourceEcon/CompMethods/' +
       'main/data/mle/Econ381totpts.txt')
data_file = requests.get(url)
if data_file.status_code == 200:
    # Load the downloaded data into a NumPy array
    data = np.loadtxt(data_file.content)
else:
    print('Error downloading the file')

num_bins = 30
count, bins, ignored = plt.hist(data, num_bins, density=True,
                                edgecolor='k')
plt.title('Intermediate macro scores: 2011-2012', fontsize=15)
plt.xlabel(r'Total points')
plt.ylabel(r'Percent of scores')
plt.xlim([0, 550])  # This gives the xmin and xmax to be plotted"

plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 12[0m
[1;32m      9[0m data_file [38;5;241m=[39m requests[38;5;241m.[39mget(url)
[1;32m     10[0m [38;5;28;01mif[39;00m data_file[38;5;241m.[39mstatus_code [38;5;241m==[39m [38;5;241m200[39m:
[1;32m     11[0m     [38;5;66;03m# Load the downloaded data into a NumPy array[39;00m
[0;32m---> 12[0m     data [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mloadtxt[49m[43m([49m[43mdata_file[49m[38;5;241;43m.[39;49m[43mcontent[49m[43m)[49m
[1;32m     13[0m [38;5;28;01melse[39;00m:
[1;32m     14[0m     [38;5;28mprint[39m([38;5;124m'[39m[38;5;124mError downloading the file[39m[38;5;124m'[39m)

File [0;32m/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/numpy/lib/npyio.py:1373[0m, in [0;36mloadtxt[0;34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows, quotechar, like)[0m
[1;32m   1370[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(delimiter, [38;5;28mbytes[39m):
[1;32m   1371[0m     delimiter [38;5;241m=[39m delimiter[38;5;241m.[39mdecode([38;5;124m'[39m[38;5;124mlatin1[39m[38;5;124m'[39m)
[0;32m-> 1373[0m arr [38;5;241m=[39m [43m_read[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mcomment[49m[38;5;241;43m=[39;49m[43mcomment[49m[43m,[49m[43m [49m[43mdelimiter[49m[38;5;241;43m=[39;49m[43mdelimiter[49m[43m,[49m
[1;32m   1374[0m [43m            [49m[43mconverters[49m[38;5;241;43m=[39;49m[43mconverters[49m[43m,[49m[43m [49m[43mskiplines[49m[38;5;241;43m=[39;49m[43mskiprows[49m[43m,[49m[43m [49m[43musecols[49m[38;5;241;43m=[39;49m[43musecols[49m[43m,[49m
[1;32m   1375[0m [43m            [49m[43munpack[49m[38;5;241;43m=[39;49m[43munpack[49m[43m,[49m[43m [49m[43mndmin[49m[38;5;241;43m=[39;49m[43mndmin[49m[43m,[49m[43m [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m
[1;32m   1376[0m [43m            [49m[43mmax_rows[49m[38;5;241;43m=[39;49m[43mmax_rows[49m[43m,[49m[43m [49m[43mquote[49m[38;5;241;43m=[39;49m[43mquotechar[49m[43m)[49m
[1;32m   1378[0m [38;5;28;01mreturn[39;00m arr

File [0;32m/usr/share/miniconda3/envs/compmethods-dev/lib/python3.10/site-packages/numpy/lib/npyio.py:1016[0m, in [0;36m_read[0;34m(fname, delimiter, comment, quote, imaginary_unit, usecols, skiplines, max_rows, converters, ndmin, unpack, dtype, encoding)[0m
[1;32m   1013[0m     data [38;5;241m=[39m _preprocess_comments(data, comments, encoding)
[1;32m   1015[0m [38;5;28;01mif[39;00m read_dtype_via_object_chunks [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1016[0m     arr [38;5;241m=[39m [43m_load_from_filelike[49m[43m([49m
[1;32m   1017[0m [43m        [49m[43mdata[49m[43m,[49m[43m [49m[43mdelimiter[49m[38;5;241;43m=[39;49m[43mdelimiter[49m[43m,[49m[43m [49m[43mcomment[49m[38;5;241;43m=[39;49m[43mcomment[49m[43m,[49m[43m [49m[43mquote[49m[38;5;241;43m=[39;49m[43mquote[49m[43m,[49m
[1;32m   1018[0m [43m        [49m[43mimaginary_unit[49m[38;5;241;43m=[39;49m[43mimaginary_unit[49m[43m,[49m
[1;32m   1019[0m [43m        [49m[43musecols[49m[38;5;241;43m=[39;49m[43musecols[49m[43m,[49m[43m [49m[43mskiplines[49m[38;5;241;43m=[39;49m[43mskiplines[49m[43m,[49m[43m [49m[43mmax_rows[49m[38;5;241;43m=[39;49m[43mmax_rows[49m[43m,[49m
[1;32m   1020[0m [43m        [49m[43mconverters[49m[38;5;241;43m=[39;49m[43mconverters[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m
[1;32m   1021[0m [43m        [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m[43m [49m[43mfilelike[49m[38;5;241;43m=[39;49m[43mfilelike[49m[43m,[49m
[1;32m   1022[0m [43m        [49m[43mbyte_converters[49m[38;5;241;43m=[39;49m[43mbyte_converters[49m[43m)[49m
[1;32m   1024[0m [38;5;28;01melse[39;00m:
[1;32m   1025[0m     [38;5;66;03m# This branch reads the file into chunks of object arrays and then[39;00m
[1;32m   1026[0m     [38;5;66;03m# casts them to the desired actual dtype.  This ensures correct[39;00m
[1;32m   1027[0m     [38;5;66;03m# string-length and datetime-unit discovery (like `arr.astype()`).[39;00m
[1;32m   1028[0m     [38;5;66;03m# Due to chunking, certain error reports are less clear, currently.[39;00m
[1;32m   1029[0m     [38;5;28;01mif[39;00m filelike:

[0;31mTypeError[0m: non-string returned while reading data

